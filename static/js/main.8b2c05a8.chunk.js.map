{"version":3,"sources":["components/Navigation.js","actions/questions.js","views/CurrentQuestion.js","views/NewQuestion.js","views/Leaderboard.js","actions/authedUser.js","views/Login.js","helpers/_DATA.js","actions/users.js","actions/shared.js","helpers/api.js","views/App.js","serviceWorker.js","reducers/index.js","reducers/authedUser.js","reducers/users.js","reducers/questions.js","middleware/index.js","index.js"],"names":["Navigation","classes","this","props","react_default","a","createElement","className","root","index_es","position","navBar","react_router_dom","to","replace","menuButton","color","Component","withStyles","grow","flexGrow","marginLeft","marginRight","textDecoration","RECEIVE_QUESTIONS","RETRIEVE_NEW_QUESTION","handleRetrieveNewQuestion","authedUser","dispatch","type","retrieveNewQuestion","CurrentQuestion","componentDidMount","_this","questions","currentQuestion","_this$props","console","log","connect","_ref","NewQuestion","Leaderboard","SET_AUTHED_USER","handleLogin","id","setAuthedUser","Login","handleLoginClick","renderUser","user","item","key","onClick","alt","name","src","avatarURL","avatar","align","_this2","users","container","justify","alignItems","main","spacing","Object","entries","map","_ref2","slicedToArray","StyledLogin","height","maxWidth","margin","width","_ref3","catherinegregory","answers","8xf0y6ziyjabvozdd253nd","6ni6ok3ym7mf1p33lnez","am8ehyc8byjqgar0jgpub9","loxhs1bqm25b708cmbf3g","edwincarr","vthrdm985a262al8qx3do","xj352vofupe1dqz9emx13r","danoliver","author","timestamp","optionOne","votes","text","optionTwo","RECEIVE_USERS","handleInitialData","Promise","all","res","rej","setTimeout","objectSpread","then","receiveUsers","receiveQuestions","theme","createMuiTheme","palette","typography","useNextVariants","App","loggedIn","length","styles","CssBaseline_default","components_Navigation","react_router","exact","path","component","views_Login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","combineReducers","arguments","undefined","action","question","concat","hasVoted","composeWithDevTools","applyMiddleware","thunk","store","createStore","reducer","middleware","ReactDOM","render","es","views_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8b2c05a8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { Button, Toolbar, AppBar } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst styles = {\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20,\r\n        textDecoration: 'none',\r\n        color: 'white',\r\n    },\r\n}\r\n\r\n/**\r\n * This element represents the top navigation of the application.\r\n *\r\n * @class Navigation\r\n * @extends {Component}\r\n */\r\nclass Navigation extends Component {\r\n    render() {\r\n        const { classes } = this.props\r\n\r\n        return (\r\n            <div>\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar className={classes.navBar}>\r\n                            <Link to=\"/\" replace className={classes.menuButton}>\r\n                                <Button color=\"inherit\">Would You Rather?</Button>\r\n                            </Link>\r\n                            <Link to=\"/new\" replace className={classes.menuButton}>\r\n                                <Button color=\"inherit\">New Question</Button>\r\n                            </Link>\r\n                            <Link to=\"/leaderboard\" replace className={classes.menuButton}>\r\n                                <Button color=\"inherit\">Leaderboard</Button>\r\n                            </Link>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Navigation)\r\n","export const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS'\r\nexport const RETRIEVE_NEW_QUESTION = 'RETRIEVE_NEW_QUESTION'\r\n\r\nexport function receiveQuestions(questions) {\r\n    return {\r\n        type: RECEIVE_QUESTIONS,\r\n        questions,\r\n    }\r\n}\r\n\r\nexport function retrieveNewQuestion(authedUser) {\r\n    return {\r\n        type: RETRIEVE_NEW_QUESTION,\r\n        authedUser,\r\n    }\r\n}\r\n\r\nexport function handleRetrieveNewQuestion(authedUser) {\r\n    return dispatch => {\r\n        dispatch(retrieveNewQuestion(authedUser))\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { handleRetrieveNewQuestion } from '../actions/questions'\r\n\r\nclass CurrentQuestion extends Component {\r\n    componentDidMount = () => {\r\n        const { currentQuestion } = this.props.questions\r\n\r\n        if (!currentQuestion) {\r\n            this.retrieveNewQuestion()\r\n        }\r\n    }\r\n\r\n    retrieveNewQuestion = () => {\r\n        const { dispatch, authedUser } = this.props\r\n\r\n        dispatch(handleRetrieveNewQuestion(authedUser))\r\n    }\r\n\r\n    render() {\r\n        const { currentQuestion } = this.props.questions\r\n        console.log('Current question:', currentQuestion)\r\n        return <div>Current Question</div>\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser, questions, currentQuestion }) {\r\n    return {\r\n        authedUser,\r\n        questions,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CurrentQuestion)\r\n","import React, { Component } from 'react'\r\n\r\nexport default class NewQuestion extends Component {\r\n    render() {\r\n        return <div>NewQuestion</div>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Leaderboard extends Component {\r\n    render() {\r\n        return <div>Leaderboard</div>\r\n    }\r\n}\r\n","export const SET_AUTHED_USER = 'SET_AUTHED_USER'\r\n\r\nexport function setAuthedUser(id) {\r\n    return {\r\n        type: SET_AUTHED_USER,\r\n        id,\r\n    }\r\n}\r\n\r\nexport function handleLogin(id) {\r\n    return dispatch => {\r\n        dispatch(setAuthedUser(id))\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { Typography, Button, Avatar, Grid } from '@material-ui/core'\r\n\r\nimport { handleLogin } from '../actions/authedUser'\r\n\r\nconst styles = {\r\n    main: {\r\n        height: '100vh',\r\n        maxWidth: '100vw',\r\n    },\r\n    avatar: {\r\n        margin: 10,\r\n        width: 100,\r\n        height: 100,\r\n    },\r\n}\r\n\r\n/**\r\n * This container allows the user to select from a list of users.\r\n * This selection will be stored in the store.\r\n *\r\n * @class Login\r\n * @extends {Component}\r\n */\r\nclass Login extends Component {\r\n    handleLoginClick = id => {\r\n        const { dispatch } = this.props\r\n\r\n        dispatch(handleLogin(id))\r\n    }\r\n\r\n    render() {\r\n        const { users } = this.props.users\r\n        const { classes } = this.props\r\n\r\n        if (!users) {\r\n            return (\r\n                <Grid container justify=\"center\" alignItems=\"center\" className={classes.main}>\r\n                    <Typography>Loading users...</Typography>\r\n                </Grid>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Grid\r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                className={classes.main}\r\n                spacing={32}\r\n            >\r\n                {Object.entries(users).map(([id, user]) => this.renderUser(user))}\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    renderUser = user => {\r\n        const { id } = user\r\n        const { classes } = this.props\r\n        return (\r\n            <Grid item key={id}>\r\n                <Button onClick={() => this.handleLoginClick(id)}>\r\n                    <Avatar alt={user.name} src={user.avatarURL} className={classes.avatar} />\r\n                    <Typography align=\"center\">{user.name}</Typography>\r\n                </Button>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ users }) {\r\n    return {\r\n        users,\r\n    }\r\n}\r\n\r\nconst StyledLogin = withStyles(styles)(Login)\r\n\r\nexport default connect(mapStateToProps)(StyledLogin)\r\n","let users = {\r\n    catherinegregory: {\r\n        id: 'catherinegregory',\r\n        name: 'Catherine Gregory',\r\n        avatarURL: 'https://randomuser.me/api/portraits/women/82.jpg',\r\n        answers: {\r\n            '8xf0y6ziyjabvozdd253nd': 'optionOne',\r\n            '6ni6ok3ym7mf1p33lnez': 'optionTwo',\r\n            am8ehyc8byjqgar0jgpub9: 'optionTwo',\r\n            loxhs1bqm25b708cmbf3g: 'optionTwo',\r\n        },\r\n        questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9'],\r\n    },\r\n    edwincarr: {\r\n        id: 'edwincarr',\r\n        name: 'Edwin Carr',\r\n        avatarURL: 'https://randomuser.me/api/portraits/men/36.jpg',\r\n        answers: {\r\n            vthrdm985a262al8qx3do: 'optionOne',\r\n            xj352vofupe1dqz9emx13r: 'optionTwo',\r\n        },\r\n        questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\r\n    },\r\n    danoliver: {\r\n        id: 'danoliver',\r\n        name: 'Dan Oliver',\r\n        avatarURL: 'https://randomuser.me/api/portraits/men/24.jpg',\r\n        answers: {\r\n            xj352vofupe1dqz9emx13r: 'optionOne',\r\n            vthrdm985a262al8qx3do: 'optionTwo',\r\n            '6ni6ok3ym7mf1p33lnez': 'optionTwo',\r\n        },\r\n        questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\r\n    },\r\n}\r\n\r\nlet questions = {\r\n    '8xf0y6ziyjabvozdd253nd': {\r\n        id: '8xf0y6ziyjabvozdd253nd',\r\n        author: 'catherinegregory',\r\n        timestamp: 1467166872634,\r\n        optionOne: {\r\n            votes: ['catherinegregory'],\r\n            text: 'have horrible short term memory',\r\n        },\r\n        optionTwo: {\r\n            votes: [],\r\n            text: 'have horrible long term memory',\r\n        },\r\n    },\r\n    '6ni6ok3ym7mf1p33lnez': {\r\n        id: '6ni6ok3ym7mf1p33lnez',\r\n        author: 'danoliver',\r\n        timestamp: 1468479767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'become a superhero',\r\n        },\r\n        optionTwo: {\r\n            votes: ['danoliver', 'catherinegregory'],\r\n            text: 'become a supervillain',\r\n        },\r\n    },\r\n    am8ehyc8byjqgar0jgpub9: {\r\n        id: 'am8ehyc8byjqgar0jgpub9',\r\n        author: 'catherinegregory',\r\n        timestamp: 1488579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be telekinetic',\r\n        },\r\n        optionTwo: {\r\n            votes: ['catherinegregory'],\r\n            text: 'be telepathic',\r\n        },\r\n    },\r\n    loxhs1bqm25b708cmbf3g: {\r\n        id: 'loxhs1bqm25b708cmbf3g',\r\n        author: 'edwincarr',\r\n        timestamp: 1482579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be a front-end developer',\r\n        },\r\n        optionTwo: {\r\n            votes: ['catherinegregory'],\r\n            text: 'be a back-end developer',\r\n        },\r\n    },\r\n    vthrdm985a262al8qx3do: {\r\n        id: 'vthrdm985a262al8qx3do',\r\n        author: 'edwincarr',\r\n        timestamp: 1489579767190,\r\n        optionOne: {\r\n            votes: ['edwincarr'],\r\n            text: 'find $50 yourself',\r\n        },\r\n        optionTwo: {\r\n            votes: ['danoliver'],\r\n            text: 'have your best friend find $500',\r\n        },\r\n    },\r\n    xj352vofupe1dqz9emx13r: {\r\n        id: 'xj352vofupe1dqz9emx13r',\r\n        author: 'danoliver',\r\n        timestamp: 1493579767190,\r\n        optionOne: {\r\n            votes: ['danoliver'],\r\n            text: 'write JavaScript',\r\n        },\r\n        optionTwo: {\r\n            votes: ['edwincarr'],\r\n            text: 'write Swift',\r\n        },\r\n    },\r\n}\r\n\r\nfunction generateUID() {\r\n    return (\r\n        Math.random()\r\n            .toString(36)\r\n            .substring(2, 15) +\r\n        Math.random()\r\n            .toString(36)\r\n            .substring(2, 15)\r\n    )\r\n}\r\n\r\nexport function _getUsers() {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => res({ ...users }), 1000)\r\n    })\r\n}\r\n\r\nexport function _getQuestions() {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => res({ ...questions }), 1000)\r\n    })\r\n}\r\n\r\nfunction formatQuestion({ optionOneText, optionTwoText, author }) {\r\n    return {\r\n        id: generateUID(),\r\n        timestamp: Date.now(),\r\n        author,\r\n        optionOne: {\r\n            votes: [],\r\n            text: optionOneText,\r\n        },\r\n        optionTwo: {\r\n            votes: [],\r\n            text: optionTwoText,\r\n        },\r\n    }\r\n}\r\n\r\nexport function _saveQuestion(question) {\r\n    return new Promise((res, rej) => {\r\n        const authedUser = question.author\r\n        const formattedQuestion = formatQuestion(question)\r\n\r\n        setTimeout(() => {\r\n            questions = {\r\n                ...questions,\r\n                [formattedQuestion.id]: formattedQuestion,\r\n            }\r\n\r\n            users = {\r\n                ...users,\r\n                [authedUser]: {\r\n                    ...users[authedUser],\r\n                    questions: users[authedUser].questions.concat([formattedQuestion.id]),\r\n                },\r\n            }\r\n\r\n            res(formattedQuestion)\r\n        }, 1000)\r\n    })\r\n}\r\n\r\nexport function _saveQuestionAnswer({ authedUser, qid, answer }) {\r\n    return new Promise((res, rej) => {\r\n        setTimeout(() => {\r\n            users = {\r\n                ...users,\r\n                [authedUser]: {\r\n                    ...users[authedUser],\r\n                    answers: {\r\n                        ...users[authedUser].answers,\r\n                        [qid]: answer,\r\n                    },\r\n                },\r\n            }\r\n\r\n            questions = {\r\n                ...questions,\r\n                [qid]: {\r\n                    ...questions[qid],\r\n                    [answer]: {\r\n                        ...questions[qid][answer],\r\n                        votes: questions[qid][answer].votes.concat([authedUser]),\r\n                    },\r\n                },\r\n            }\r\n\r\n            res()\r\n        }, 500)\r\n    })\r\n}\r\n","export const RECEIVE_USERS = 'RECEIVE_USERS'\r\n\r\nexport function receiveUsers(users) {\r\n    return {\r\n        type: RECEIVE_USERS,\r\n        users,\r\n    }\r\n}\r\n","import { getInitialData } from '../helpers/api'\r\nimport { receiveUsers } from '../actions/users'\r\nimport { receiveQuestions } from '../actions/questions'\r\n\r\n/**\r\n * Dispatched when the app loads.\r\n * Fetches all of the question and user data.\r\n *\r\n * @export\r\n * @returns {Promise} This resolves when the user data is retrieved.\r\n */\r\nexport function handleInitialData() {\r\n    return dispatch => {\r\n        return getInitialData().then(({ users, questions }) => {\r\n            dispatch(receiveUsers(users))\r\n            dispatch(receiveQuestions(questions))\r\n        })\r\n    }\r\n}\r\n","import { _getUsers, _getQuestions, _saveQuestion, _saveQuestionAnswer } from './_DATA.js'\r\n\r\nexport function getInitialData() {\r\n    return Promise.all([_getUsers(), _getQuestions()]).then(([users, questions]) => ({\r\n        users,\r\n        questions,\r\n    }))\r\n}\r\n\r\nexport function saveQuestion(question) {\r\n    return _saveQuestion(question)\r\n}\r\n\r\nexport function saveQuestionAnswer(authedUser, qid, answer) {\r\n    return _saveQuestionAnswer(authedUser, qid, answer)\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { MuiThemeProvider } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nimport Navigation from '../components/Navigation'\r\n\r\nimport CurrentQuestion from './CurrentQuestion'\r\nimport NewQuestion from './NewQuestion'\r\nimport Leaderboard from './Leaderboard'\r\nimport Login from './Login'\r\n\r\nimport { handleInitialData } from '../actions/shared'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    typography: { useNextVariants: true },\r\n})\r\n\r\n/**\r\n * The main app that contains the entire page.\r\n * This also contains the theme provider.\r\n * If the user is not logged in, we'll show the login page.\r\n *\r\n * @class App\r\n * @extends {Component}\r\n */\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.dispatch(handleInitialData())\r\n    }\r\n\r\n    render() {\r\n        const { authedUser } = this.props\r\n        const loggedIn = Object.entries(authedUser).length !== 0\r\n\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                {loggedIn ? (\r\n                    <Router>\r\n                        <Navigation />\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={CurrentQuestion} />\r\n                            <Route path=\"/new\" component={NewQuestion} />\r\n                            <Route path=\"/leaderboard\" component={Leaderboard} />\r\n                        </Switch>\r\n                    </Router>\r\n                ) : (\r\n                    <Login />\r\n                )}\r\n            </MuiThemeProvider>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({ authedUser }) {\r\n    return {\r\n        authedUser,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\r\n\r\nimport authedUser from './authedUser'\r\nimport users from './users'\r\nimport questions from './questions'\r\n\r\nexport default combineReducers({\r\n    authedUser,\r\n    users,\r\n    questions,\r\n})\r\n","import { SET_AUTHED_USER } from '../actions/authedUser'\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case SET_AUTHED_USER:\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { RECEIVE_USERS } from '../actions/users'\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { RECEIVE_QUESTIONS, RETRIEVE_NEW_QUESTION } from '../actions/questions'\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case RECEIVE_QUESTIONS:\r\n            return {\r\n                ...state,\r\n                questions: action.questions,\r\n            }\r\n        case RETRIEVE_NEW_QUESTION:\r\n            for (const key in state.questions) {\r\n                const question = state.questions[key]\r\n                // Concatenate the two arrays to get all votes of the question\r\n                const votes = question.optionOne.votes.concat(question.optionTwo.votes)\r\n                // Find the first question where the user hasn't voted\r\n                let hasVoted = false\r\n                for (const key in votes) {\r\n                    if (votes[key] === action.authedUser.id) {\r\n                        hasVoted = true\r\n                    }\r\n                }\r\n                if (!hasVoted) {\r\n                    return {\r\n                        ...state,\r\n                        currentQuestion: key,\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                currentQuestion: null,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import thunk from 'redux-thunk'\r\nimport { applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nexport default composeWithDevTools(applyMiddleware(thunk))\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './views/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers'\nimport middleware from './middleware'\n\nconst store = createStore(reducer, middleware)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}